@{
    ViewData["Title"] = "Fake User Data Generator";
}

<h2>Fake User Data Generator</h2>

<form>
    <div class="d-flex justify-content-between mb-3">
        <div class="p-2 bd-highlight">
        <label>Select Region: </label>
    <select id="region" onchange="GenerateData()">
        <option value="Poland">Poland</option>
        <option value="USA">USA</option>
        <option value="Georgia">Georgia</option>
    </select>
    </div>
    <br /><br />
        <div class="p-2 bd-highlight">
    <label>Errors per Record: </label>
    <input type="range" id="errorSlider" min="0" max="10" step="0.1" onchange="UpdateErrors()">
    <input type="number" id="errorCount" min="0" max="1000" oninput="UpdateSlider()">
    </div>
    <br /><br />
        <div class="p-2 bd-highlight">
    <label>Seed: </label>
    <input type="number" id="seedValue" min="0" oninput="GenerateData()">
    <button type="button" onclick="GenerateRandomSeed()">Random Seed</button>
    </div>
    <br /><br />
    
    <div class="p-2 bd-highlight">
    <button type="button" onclick="exportToCsv()">Export to CSV</button>
    </div>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Index</th>
                <th>Random ID</th>
                <th>Name</th>
                <th>Address</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody id="dataTable"></tbody>
    </table>
</form>

<!-- Infinite Scroll Trigger -->
<div id="scrollLoading" style="height: 50px; text-align: center; display: none;">
    <p>Loading more records...</p>
</div>

<script>
    let currentPage = 0;
    let isLoading = false;
    let lastPageReached = false;

    // JavaScript changes for handling data reload on region change
    function GenerateData() {
        currentPage = 0; // Reset to page 0 when region changes
        document.getElementById('dataTable').innerHTML = '';  // Clear the table
        lastPageReached = false; // Reset the flag
        LoadMoreData(); // Fetch new data
    }

    function LoadMoreData() {
        if (isLoading || lastPageReached) return;

        isLoading = true;
        document.getElementById('scrollLoading').style.display = 'block';  // Show loading

        const region = document.getElementById('region').value;
        const errorCount = document.getElementById('errorCount').value;
        const seed = document.getElementById('seedValue').value;

        fetch(`/api/data?page=${currentPage}&region=${region}&errors=${errorCount}&seed=${seed}`)
            .then(response => response.json())
            .then(data => {
                if (data.length === 0) {
                    lastPageReached = true;  // No more records to load
                }

                const table = document.getElementById('dataTable');
                data.forEach((row) => {
                    const rowHTML = `<tr>
                        <td>${row.index}</td>
                        <td>${row.randomId}</td>
                        <td>${row.name}</td>
                        <td>${row.address}</td>
                        <td>${row.phone}</td>
                    </tr>`;
                    table.innerHTML += rowHTML;
                });

                currentPage += 1;
                isLoading = false;
                document.getElementById('scrollLoading').style.display = 'none';  // Hide loading
            })
            .catch(error => {
                console.error("Error loading data:", error);
                isLoading = false;
                document.getElementById('scrollLoading').style.display = 'none';  // Hide loading
            });
    }
    // Function to generate a random seed
    function GenerateRandomSeed() {
        document.getElementById('seedValue').value = Math.floor(Math.random() * 100000);
        GenerateData();
    }

    // Function to synchronize slider with the numeric input
    function UpdateErrors() {
        const errorSlider = document.getElementById('errorSlider');
        const errorCount = document.getElementById('errorCount');

        // Synchronize errorCount (0-1000) with the slider (0-10)
        errorCount.value = Math.round(errorSlider.value * 100); // Scale slider value for field (0..1000)
        GenerateData();
    }

    // Function to synchronize numeric input with the slider
    function UpdateSlider() {
        const errorSlider = document.getElementById('errorSlider');
        const errorCount = document.getElementById('errorCount');

        // Synchronize slider (0-10) with errorCount (0-1000)
        errorSlider.value = Math.min(10, errorCount.value / 100); // Scale field value for slider (0..10)
        GenerateData();
    }

    // Infinite scroll logic: Detect if the user is near the bottom of the page
    window.addEventListener('scroll', function () {
        const scrollPosition = window.innerHeight + window.pageYOffset;
        const documentHeight = document.documentElement.scrollHeight;

        // If the user scrolls within 100 pixels of the bottom, load more data
        if (scrollPosition >= documentHeight - 100 && !isLoading && !lastPageReached) {
            LoadMoreData();
        }
    });

    // Export to CSV
    function exportToCsv() {
        const region = document.getElementById('region').value;
        const errorCount = document.getElementById('errorCount').value;
        const seed = document.getElementById('seedValue').value;

        // Redirect to the CSV export URL
        window.location.href = `/api/data/exportCsv?region=${region}&errors=${errorCount}&seed=${seed}`;
    }
</script>
